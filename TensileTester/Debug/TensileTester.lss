
TensileTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000488  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005226  00000000  00000000  0000055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000027f2  00000000  00000000  00005785  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007eb  00000000  00000000  00007f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00008764  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000108e  00000000  00000000  000088b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000032a  00000000  00000000  00009942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000410  00000410  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_37 0000009c  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    000000bc  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.buffer.3069 00000004  00802800  00802800  00000488  2**0
                  ALLOC
 16 .text.pwm_init 0000002a  00000396  00000396  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_rw  0000001a  000003e8  000003e8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_init 00000088  00000252  00000252  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uart_init 00000028  000003c0  000003c0  00000434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.uart_putchar 0000000e  00000402  00000402  00000476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.uart_putdata 00000048  0000034e  0000034e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.com_handler 00000074  000002da  000002da  0000034e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
   8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
   c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  28:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  34:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  38:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  54:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  58:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  5c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  60:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  64:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  68:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  6c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  70:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  74:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  78:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  7c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  80:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  84:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  88:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  8c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  90:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  94:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_37>
  98:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
  9c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>

000000a0 <.dinit>:
  a0:	28 00       	.word	0x0028	; ????
  a2:	28 04       	cpc	r2, r8
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	df e3       	ldi	r29, 0x3F	; 63
  b0:	de bf       	out	0x3e, r29	; 62

000000b2 <__do_copy_data>:
  b2:	e0 ea       	ldi	r30, 0xA0	; 160
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	17 c0       	rjmp	.+46     	; 0xe8 <__do_clear_bss+0x8>
  ba:	b5 91       	lpm	r27, Z+
  bc:	a5 91       	lpm	r26, Z+
  be:	35 91       	lpm	r19, Z+
  c0:	25 91       	lpm	r18, Z+
  c2:	05 91       	lpm	r16, Z+
  c4:	07 fd       	sbrc	r16, 7
  c6:	0c c0       	rjmp	.+24     	; 0xe0 <__do_clear_bss>
  c8:	95 91       	lpm	r25, Z+
  ca:	85 91       	lpm	r24, Z+
  cc:	ef 01       	movw	r28, r30
  ce:	f9 2f       	mov	r31, r25
  d0:	e8 2f       	mov	r30, r24
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a2 17       	cp	r26, r18
  d8:	b3 07       	cpc	r27, r19
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0x20>
  dc:	fe 01       	movw	r30, r28
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_clear_bss+0x8>

000000e0 <__do_clear_bss>:
  e0:	1d 92       	st	X+, r1
  e2:	a2 17       	cp	r26, r18
  e4:	b3 07       	cpc	r27, r19
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__do_clear_bss>
  e8:	e5 3a       	cpi	r30, 0xA5	; 165
  ea:	f4 07       	cpc	r31, r20
  ec:	31 f7       	brne	.-52     	; 0xba <__do_copy_data+0x8>
  ee:	0e 94 7d 00 	call	0xfa	; 0xfa <_etext>
  f2:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>

Disassembly of section .text:

00000410 <__bad_interrupt>:
 410:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_37:

000001b6 <__vector_37>:
#include "UART.h"
#include "PWM.h"
#include "SPI.h"

ISR(USART3_RXC_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	static uint32_t buffer = 0;
	uint8_t input = USART3.RXDATAL;
 1d8:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	
	if (input == '\n')
 1dc:	2a 30       	cpi	r18, 0x0A	; 10
 1de:	99 f4       	brne	.+38     	; 0x206 <__vector_37+0x50>
	{
		com_handler(buffer);
 1e0:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 1e4:	70 91 01 28 	lds	r23, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 1ec:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 1f0:	0e 94 6d 01 	call	0x2da	; 0x2da <com_handler>
		buffer = 0;
 1f4:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 1f8:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 1fc:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 200:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 204:	15 c0       	rjmp	.+42     	; 0x230 <__vector_37+0x7a>
	}
	else
	{
		buffer = (buffer << 8) | input;
 206:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 02 28 	lds	r26, 0x2802	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 03 28 	lds	r27, 0x2803	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 216:	ba 2f       	mov	r27, r26
 218:	a9 2f       	mov	r26, r25
 21a:	98 2f       	mov	r25, r24
 21c:	88 27       	eor	r24, r24
 21e:	82 2b       	or	r24, r18
 220:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 224:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 228:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 22c:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
	}
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

Disassembly of section .text.main:

000000fa <main>:

int main(void)
{
	PORTA.DIR = PIN4_bm | PIN6_bm | PIN7_bm;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d4 e0       	ldi	r29, 0x04	; 4
  fe:	80 ed       	ldi	r24, 0xD0	; 208
 100:	88 83       	st	Y, r24
	PORTB.DIR = PIN0_bm;
 102:	a0 e2       	ldi	r26, 0x20	; 32
 104:	b4 e0       	ldi	r27, 0x04	; 4
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	8c 93       	st	X, r24
	PORTC.DIR = PIN4_bm | PIN1_bm | PIN0_bm;
 10a:	e0 e4       	ldi	r30, 0x40	; 64
 10c:	f4 e0       	ldi	r31, 0x04	; 4
 10e:	93 e1       	ldi	r25, 0x13	; 19
 110:	90 83       	st	Z, r25
	PORTD.DIR = PIN0_bm;
 112:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7f4460>
	
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm; //MISO
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	8d 8b       	std	Y+21, r24	; 0x15
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; //UART RX
 11a:	50 96       	adiw	r26, 0x10	; 16
 11c:	8c 93       	st	X, r24
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm; //DRDY
 11e:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTC.OUT = PIN4_bm;//reset pin high
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	84 83       	std	Z+4, r24	; 0x04
	
	uart_init();
 124:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <uart_init>
	pwm_init();
 128:	0e 94 cb 01 	call	0x396	; 0x396 <pwm_init>
	spi_init();
 12c:	0e 94 29 01 	call	0x252	; 0x252 <spi_init>

	while (1) {
		if (!(PORTC.IN & PIN2_bm))
 130:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
 134:	82 fd       	sbrc	r24, 2
 136:	fc cf       	rjmp	.-8      	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>
		{
			spi_rw(ADC_RS_DATA_gc | ADC_RDEN_bm | ADC_CS_FD12_gc); // Read from data register on fd channel 1/2
 138:	8c e5       	ldi	r24, 0x5C	; 92
 13a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
			uint32_t length_data = 0;
			length_data = spi_rw(0xff);
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 144:	c8 2e       	mov	r12, r24
 146:	d1 2c       	mov	r13, r1
 148:	e1 2c       	mov	r14, r1
 14a:	f1 2c       	mov	r15, r1
			length_data = (length_data << 8) | spi_rw(0xff);
 14c:	fe 2c       	mov	r15, r14
 14e:	ed 2c       	mov	r14, r13
 150:	dc 2c       	mov	r13, r12
 152:	cc 24       	eor	r12, r12
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 15a:	c8 2a       	or	r12, r24
			length_data = (length_data << 8) | spi_rw(0xff);
 15c:	fe 2c       	mov	r15, r14
 15e:	ed 2c       	mov	r14, r13
 160:	dc 2c       	mov	r13, r12
 162:	cc 24       	eor	r12, r12
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 16a:	c8 2a       	or	r12, r24
			
			//while (!(PORTC.IN & PIN2_bm));
			while (PORTC.IN & PIN2_bm);
 16c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
 170:	82 fd       	sbrc	r24, 2
 172:	fc cf       	rjmp	.-8      	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
			
			
			spi_rw(ADC_RS_DATA_gc | ADC_RDEN_bm | ADC_CS_FD34_gc); // Read from data register on fd channel 3/4
 174:	8d e5       	ldi	r24, 0x5D	; 93
 176:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
			uint32_t stress_data = 0;
			stress_data = spi_rw(0xff);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 180:	88 2e       	mov	r8, r24
 182:	91 2c       	mov	r9, r1
 184:	a1 2c       	mov	r10, r1
 186:	b1 2c       	mov	r11, r1
			stress_data = (stress_data << 8) | spi_rw(0xff);
 188:	ba 2c       	mov	r11, r10
 18a:	a9 2c       	mov	r10, r9
 18c:	98 2c       	mov	r9, r8
 18e:	88 24       	eor	r8, r8
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 196:	88 2a       	or	r8, r24
			stress_data = (stress_data << 8) | spi_rw(0xff);
 198:	ba 2c       	mov	r11, r10
 19a:	a9 2c       	mov	r10, r9
 19c:	98 2c       	mov	r9, r8
 19e:	88 24       	eor	r8, r8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 1a6:	a5 01       	movw	r20, r10
 1a8:	94 01       	movw	r18, r8
 1aa:	28 2b       	or	r18, r24
			
			uart_putdata(length_data,stress_data);
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 a7 01 	call	0x34e	; 0x34e <uart_putdata>
 1b4:	bd cf       	rjmp	.-134    	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>

Disassembly of section .text.pwm_init:

00000396 <pwm_init>:

#include "PWM.h"

void pwm_init(void)
{
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
 39c:	e0 e0       	ldi	r30, 0x00	; 0
 39e:	fa e0       	ldi	r31, 0x0A	; 10
 3a0:	83 e1       	ldi	r24, 0x13	; 19
 3a2:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm);
 3a4:	81 85       	ldd	r24, Z+9	; 0x09
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	81 87       	std	Z+9, r24	; 0x09
	TCA0.SINGLE.PERBUF  = PWM_PERIOD;
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	95 e7       	ldi	r25, 0x75	; 117
 3ae:	86 ab       	std	Z+54, r24	; 0x36
 3b0:	97 ab       	std	Z+55, r25	; 0x37
	TCA0.SINGLE.CMP0BUF = DUTY_CYCLE_10;
 3b2:	88 eb       	ldi	r24, 0xB8	; 184
 3b4:	9b e0       	ldi	r25, 0x0B	; 11
 3b6:	80 af       	std	Z+56, r24	; 0x38
 3b8:	91 af       	std	Z+57, r25	; 0x39
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm;
 3ba:	8b e0       	ldi	r24, 0x0B	; 11
 3bc:	80 83       	st	Z, r24
 3be:	08 95       	ret

Disassembly of section .text.spi_rw:

000003e8 <spi_rw>:
	
}

uint8_t spi_rw(uint8_t out_data)
{
	while (!(SPI0.INTFLAGS & SPI_DREIF_bm));
 3e8:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
 3ec:	95 ff       	sbrs	r25, 5
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <spi_rw>
	SPI0.DATA = out_data;
 3f0:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm));
 3f4:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7f48c3>
 3f8:	88 23       	and	r24, r24
 3fa:	e4 f7       	brge	.-8      	; 0x3f4 <spi_rw+0xc>
	return SPI0.DATA;
 3fc:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
}
 400:	08 95       	ret

Disassembly of section .text.spi_init:

00000252 <spi_init>:

#include "SPI.h"

void spi_init(void)
{
	PORTC.OUT &= ~PIN4_bm;
 252:	e0 e4       	ldi	r30, 0x40	; 64
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	84 81       	ldd	r24, Z+4	; 0x04
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	84 83       	std	Z+4, r24	; 0x04
	
    SPI0.CTRLB = SPI_BUFEN_bm | SPI_BUFWR_bm | SPI_SSD_bm | SPI_MODE_3_gc;
 25c:	a0 ec       	ldi	r26, 0xC0	; 192
 25e:	b8 e0       	ldi	r27, 0x08	; 8
 260:	87 ec       	ldi	r24, 0xC7	; 199
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	8c 93       	st	X, r24
 266:	11 97       	sbiw	r26, 0x01	; 1
    SPI0.CTRLA = SPI_MASTER_bm | SPI_PRESC_DIV16_gc | SPI_ENABLE_bm;
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e4       	ldi	r24, 0x4F	; 79
 26e:	93 ec       	ldi	r25, 0xC3	; 195
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <spi_init+0x1e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <spi_init+0x24>
 276:	00 00       	nop
	
	_delay_ms(10);
	PORTC.OUT |= PIN4_bm;
 278:	84 81       	ldd	r24, Z+4	; 0x04
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	84 83       	std	Z+4, r24	; 0x04
	
	spi_rw(0xff);
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	
	spi_rw(ADC_RS_FH_gc | ADC_CS_FD12_gc); //Write to filter high on fd channel 1/2
 284:	84 e2       	ldi	r24, 0x24	; 36
 286:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_FH_WL_bm | 0x01); //Word length 24-bit
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_RS_FL_gc | ADC_CS_FD12_gc); //Write to filter low on fd channel 1/2
 290:	84 e3       	ldi	r24, 0x34	; 52
 292:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(0x80); //Filter to 50 Hz
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_RS_MODE_gc | ADC_CS_FD12_gc); //Write to mode register on fd channel 1/2
 29c:	84 e1       	ldi	r24, 0x14	; 20
 29e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_MR_SC_gc); //Run self calibration
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	
	spi_rw(0xff);
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	
	
	spi_rw(ADC_RS_FH_gc | ADC_FH_BST_bm | ADC_CS_FD34_gc); //Write to filter high on fd channel 3/4
 2ae:	85 e2       	ldi	r24, 0x25	; 37
 2b0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_FH_WL_bm | 0x01); //Word length 24-bit
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_RS_FL_gc | ADC_CS_FD34_gc); //Write to filter low on fd channel 3/4
 2ba:	85 e3       	ldi	r24, 0x35	; 53
 2bc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(0x80); //Filter to 50 Hz
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_RS_MODE_gc | ADC_CS_FD34_gc); //Write to mode register on fd channel 3/4
 2c6:	85 e1       	ldi	r24, 0x15	; 21
 2c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	spi_rw(ADC_MR_SC_gc | ADC_MR_GAIN128_gc); //Run self calibration, 128x gain
 2cc:	8c e3       	ldi	r24, 0x3C	; 60
 2ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
	
	spi_rw(0xff);
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <spi_rw>
 2d8:	08 95       	ret

Disassembly of section .text.uart_init:

000003c0 <uart_init>:
#include "UART.h"
#include "SPI.h"

void uart_init(void)
{
	cli();
 3c0:	f8 94       	cli
	_PROTECTED_WRITE((CLKCTRL.MCLKCTRLB), (0 << CLKCTRL_PEN_bp));
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	88 ed       	ldi	r24, 0xD8	; 216
 3c6:	84 bf       	out	0x34, r24	; 52
 3c8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	USART3.BAUD = BAUD_FROM_RATE(BAUDRATE);
 3cc:	e0 e6       	ldi	r30, 0x60	; 96
 3ce:	f8 e0       	ldi	r31, 0x08	; 8
 3d0:	86 eb       	ldi	r24, 0xB6	; 182
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	80 87       	std	Z+8, r24	; 0x08
 3d6:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLA = USART_RXCIE_bm;
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	85 83       	std	Z+5, r24	; 0x05
	USART3.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 3dc:	80 ec       	ldi	r24, 0xC0	; 192
 3de:	86 83       	std	Z+6, r24	; 0x06
	USART3.CTRLC = USART_SBMODE_2BIT_gc | USART_CHSIZE_8BIT_gc;
 3e0:	8b e0       	ldi	r24, 0x0B	; 11
 3e2:	87 83       	std	Z+7, r24	; 0x07
	sei();
 3e4:	78 94       	sei
 3e6:	08 95       	ret

Disassembly of section .text.uart_putchar:

00000402 <uart_putchar>:
}

void uart_putchar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 402:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
 406:	95 ff       	sbrs	r25, 5
 408:	fc cf       	rjmp	.-8      	; 0x402 <uart_putchar>
	;
	USART3.TXDATAL = c;
 40a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
 40e:	08 95       	ret

Disassembly of section .text.uart_putdata:

0000034e <uart_putdata>:
}

void uart_putdata(uint32_t length, uint32_t force)
{
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	06 2f       	mov	r16, r22
 35a:	f7 2e       	mov	r15, r23
 35c:	c2 2f       	mov	r28, r18
 35e:	d3 2f       	mov	r29, r19
 360:	14 2f       	mov	r17, r20
	uart_putchar(length >> 16);
 362:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar((length >> 8) & 0xff);
 366:	8f 2d       	mov	r24, r15
 368:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar(length & 0xff);
 36c:	80 2f       	mov	r24, r16
 36e:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar(force >> 16);
 372:	81 2f       	mov	r24, r17
 374:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar((force >> 8) & 0xff);
 378:	8d 2f       	mov	r24, r29
 37a:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar(force & 0xff);
 37e:	8c 2f       	mov	r24, r28
 380:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
	uart_putchar('\n');
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	0e 94 01 02 	call	0x402	; 0x402 <uart_putchar>
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	08 95       	ret

Disassembly of section .text.com_handler:

000002da <com_handler>:

void com_handler(uint32_t in_data)
{
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
	if (in_data == 's')
 2de:	63 37       	cpi	r22, 0x73	; 115
 2e0:	71 05       	cpc	r23, r1
 2e2:	81 05       	cpc	r24, r1
 2e4:	91 05       	cpc	r25, r1
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <com_handler+0x18>
	{
		PORTC.OUT &= ~PIN0_bm;
 2e8:	e0 e4       	ldi	r30, 0x40	; 64
 2ea:	f4 e0       	ldi	r31, 0x04	; 4
 2ec:	24 81       	ldd	r18, Z+4	; 0x04
 2ee:	2e 7f       	andi	r18, 0xFE	; 254
 2f0:	24 83       	std	Z+4, r18	; 0x04
	}
	if (in_data == 'r')
 2f2:	62 37       	cpi	r22, 0x72	; 114
 2f4:	71 05       	cpc	r23, r1
 2f6:	81 05       	cpc	r24, r1
 2f8:	91 05       	cpc	r25, r1
 2fa:	19 f4       	brne	.+6      	; 0x302 <com_handler+0x28>
	{
		spi_init();
 2fc:	0e 94 29 01 	call	0x252	; 0x252 <spi_init>
 300:	23 c0       	rjmp	.+70     	; 0x348 <com_handler+0x6e>
	}
	else if ((in_data >> 16) == 'l')
 302:	8c 01       	movw	r16, r24
 304:	22 27       	eor	r18, r18
 306:	33 27       	eor	r19, r19
 308:	0c 36       	cpi	r16, 0x6C	; 108
 30a:	11 05       	cpc	r17, r1
 30c:	21 05       	cpc	r18, r1
 30e:	31 05       	cpc	r19, r1
 310:	51 f4       	brne	.+20     	; 0x326 <com_handler+0x4c>
	{
		PORTC.OUT |= PIN0_bm | PIN1_bm;
 312:	e0 e4       	ldi	r30, 0x40	; 64
 314:	f4 e0       	ldi	r31, 0x04	; 4
 316:	24 81       	ldd	r18, Z+4	; 0x04
 318:	23 60       	ori	r18, 0x03	; 3
 31a:	24 83       	std	Z+4, r18	; 0x04
		TCA0.SINGLE.CMP0BUF = in_data & 0xffff;
 31c:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
 320:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
 324:	11 c0       	rjmp	.+34     	; 0x348 <com_handler+0x6e>
	}
	else if ((in_data >> 16) == 'u')
 326:	05 37       	cpi	r16, 0x75	; 117
 328:	11 05       	cpc	r17, r1
 32a:	21 05       	cpc	r18, r1
 32c:	31 05       	cpc	r19, r1
 32e:	61 f4       	brne	.+24     	; 0x348 <com_handler+0x6e>
	{
		PORTC.OUT |= PIN0_bm;
 330:	e0 e4       	ldi	r30, 0x40	; 64
 332:	f4 e0       	ldi	r31, 0x04	; 4
 334:	24 81       	ldd	r18, Z+4	; 0x04
 336:	21 60       	ori	r18, 0x01	; 1
 338:	24 83       	std	Z+4, r18	; 0x04
		PORTC.OUT &= ~PIN1_bm;
 33a:	24 81       	ldd	r18, Z+4	; 0x04
 33c:	2d 7f       	andi	r18, 0xFD	; 253
 33e:	24 83       	std	Z+4, r18	; 0x04
		TCA0.SINGLE.CMP0BUF = in_data & 0xffff;
 340:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
 344:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
	}
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret
